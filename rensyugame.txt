１。#コンピューターが引いた数の奇数か偶数かを当てるゲーム
import randomを利用しコンピューターと利用者間の対決ができるプログラムである。当たる場合、スコアーが上がり間違ったらライフが1つ減る構図であり、ライフが０になったら
ゲーム終了になる。このゲームはライフが０になるとwhile Trueから脱出できるようにライフが０になった場合にbreakを入れてプログラムを終了できるようにした。
しかし、ゲームに難易度の設定を加えてないし、もしもゲームを続けたい場合の設定も加えてないから次のプログラムに加えてみることにした。
２。#アップダウンゲーム
１のゲームと同じくimport randomを用いて、コンピューターが提示した数から当てる形である。まず利用者が入力した数とコンピューターの数が一致すると終わるように設定し
一致した場合に一度breakを入れた。あとコンピューターが引ける数は1桁数2桁数３桁数での難易度に分けて最初に選択するようにした。つまり1つ目のwhile Trueの次に問題
解決の2つ目のwhile Trueが入る形である。しかし、もう一度ゲームをしたい場合もあるから、加えることにした。この場合は全体をもう一度実行するから2つのwhile Trueを包むwhile True
が入る。breakも同じく3つ入るがまず正解の場合に1つ、難易度選択の場合必ず選択が正しかったら終わらないといけないから、選択した後にbreakを加え選択肢以外を入力したらcontinueを入れ、
もう一度選択するようにした。最後のbreakは継続するかしないかを選ぶときに、継続しない場合にゲームが終了するようにした。
３。演算ゲーム（＋、ー）
今回は上の設定から付加的な機能をいくつか入れてみた。まずライフが間違った場合2つ減ることとか、何確率でスコアーをよりもらえるように設定を加えた。
この場合は利用者が何かをすることではなく、コンピューターが設定してくれるから、randintから確率の場合(1,5)だと1〜５の中で１を選んだ場合（20パーセント）の確率設定ができた。
ここで一番エラーが出やすいところは（-）の場合であり、大きい数から小さい数を引けるように設定しないといけないし、さらに−２のライフも０か０よりも小さい場合を設定することである
#         if life <= 0:
#             print("game over")
#             break
もしlife == 0に設定してしまうとライフが−１−２−３...となりかねるからここは気をつけた方がいいと感じた








